text_indentation(text)
======================

	This function is used to split text when ever he finds a `.` , `?` or `:` and append after them 2 new lines and printing them

:parameters:
	**text** :
		The string to be split

:Returns:
		There is no return just printing the splited text with adding two new lines after eache delimeter (`.` , `?`, `:`)

:Raises:
	**TypeError** :
		if the text is not a string

:Normale Usage:

	Let see how we can use this function

	::

		>>> text_indentation = __import__('5-text_indentation').text_indentation
		>>> text = "hi, i am sam. do you know how this function works? no, so let see: "
		>>> text_indentation(text)
		hi, i am sam.
		<BLANKLINE>
		do you know how this function works?
		<BLANKLINE>
		no, so let see:
		<BLANKLINE>

:Edge cases:

		this function can handle small input, large ones, and multiple delimiters

	::
		>>> text = "there is no delimeters"
		>>> text_indentation(text)
		there is no delimeters
		>>> text = """Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
		... Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
		... Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
		... Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
		... Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
		... rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
		... stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
		... cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
		... beatiorem! Iam ruinas videres"""
		>>> text_indentation(text)
		Lorem ipsum dolor sit amet, consectetur adipiscing elit.
		<BLANKLINE>
		Quonam modo?
		<BLANKLINE>
		Utrum igitur tibi litteram videor an totas paginas commovere?
		<BLANKLINE>
		Non autem hoc:
		<BLANKLINE>
		igitur ne illud quidem.
		<BLANKLINE>
		Fortasse id optimum, sed ubi illud:
		<BLANKLINE>
		Plus semper voluptatis?
		<BLANKLINE>
		Teneo, inquit, finem illi videri nihil dolere.
		<BLANKLINE>
		Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
		<BLANKLINE>
		Si id dicis, vicimus.
		<BLANKLINE>
		Inde sermone vario sex illa a Dipylo stadia confecimus.
		<BLANKLINE>
		Sin aliud quid voles, postea.
		<BLANKLINE>
		Quae animi affectio suum cuique tribuens atque hanc, quam dico.
		<BLANKLINE>
		Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres
		>>> text = ".?:"
		>>> text_indentation(text)
		.
		<BLANKLINE>
		?
		<BLANKLINE>
		:
		<BLANKLINE>
		>>> text = "."
		>>> text_indentation(text)
		.
		<BLANKLINE>
		>>> text = "this is the end.....!!!"
		>>> text_indentation(text)
		this is the end.
		<BLANKLINE>
		.
		<BLANKLINE>
		.
		<BLANKLINE>
		.
		<BLANKLINE>
		.
		<BLANKLINE>
		!!!
		>>> text_indentation("")

:special cases:

	This function can also handle new lines in the string, or special charcters or multiple whitespaces

	::

		>>> text = "there is a new line after this line. \n"
		>>> text_indentation(text)
		there is a new line after this line.
		<BLANKLINE>
		<BLANKLINE>
		>>> text = "1)(&**^&(*(*!!!!?"
		>>> text_indentation(text)
		1)(&**^&(*(*!!!!?
		<BLANKLINE>
		>>> text = "multipel whitespaces:     here we are.     "
		>>> text_indentation(text) #doctest: +NORMALIZE_WHITESPACE
		multipel whitespaces:
		<BLANKLINE>
		    here we are.
		<BLANKLINE>
		>>> text = "    "
		>>> text_indentation(text) #doctest: +NORMALIZE_WHITESPACE
		    
		>>> text_indentation(" tlke.")
		tlke.
		<BLANKLINE>

:Error Cases:

	this function raise a typeError if the argument is not a sting

	::
		>>> text_indentation(None)
		Traceback (most recent call last):
		TypeError: text must be a string
		>>> text_indentation(22232)
		Traceback (most recent call last):
		TypeError: text must be a string
		>>> text_indentation(["list of strings.", "aple???"])
		Traceback (most recent call last):
		TypeError: text must be a string
		>>> text_indentation()
		Traceback (most recent call last):
		TypeError: text_indentation() missing 1 required positional argument: 'text'

